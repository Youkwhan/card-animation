*,
*::before,
*::after {
	box-sizing: border-box;
}

:root {
	--clr-neutral-900: hsl(207, 19%, 9%);
	--clr-neutral-100: hsl(0, 0%, 100%);
	--clr-accent-400: hsl(142, 90%, 61%);
}

body {
	display: grid;
	/* it would be the size of our content, but we made body the entire vh instead => for centering purposes */
	min-height: 100vh;
	place-items: center;
	line-height: 1.6;
	background-color: var(--clr-neutral-900);
	font-family: sans-serif;
}

.card {
	color: var(--clr-neutral-100);
	background-image: url("card-bg.jpg");
	background-size: cover;
	padding: 10rem 0 0;

	/*card width is dictated by text content*/
	max-width: 35ch;

	border-radius: 0.5rem;
	overflow: hidden;

	transition: transform 500ms ease;
}

.card:hover,
.card:focus-within {
	/* when we do scale subtle is better */
	transform: scale(1.05);
}

/* our content's faded background, For readability regardless of img.*/
.card-content {
	/* padding: 1.5rem; */
	background: linear-gradient(
		hsl(0 0% 0% / 0),
		hsl(20 0% 0% / 0.3) 20%,
		hsl(0 0% 0% / 1)
	);

	/*locally scoped (nested element tags), give card-title::after a -padding, to offset the alinement*/
	--padding: 1.5rem;
	padding: var(--padding);

	/* instead of using position:absolute, if we can use transform then we do best practice for performance rather than setting a width and such */
	transform: translateY(65%);
	transition: transform 500ms ease;
}

.card:hover .card-content,
.card:focus-within .card-content {
	transform: translateY(0);
	transition-delay: 500ms;
}

.card:focus-within .card-content {
	transition-duration: 0ms;
}

.card-content > *:not(.card-title) {
	opacity: 0;
	/* opacirty animation fade in and out */
	transition: opacity 500ms linear;
}

.card:hover .card-content > *:not(.card-title),
.card:focus-within .card-content > *:not(.card-title) {
	opacity: 1;
	transition-delay: 800ms;
}

/*  Use postiion absolute to break it outside of the .card padding we are inside of*/
.card-title {
	/* So, ::after will have matching width and position with the container, which is a BLOCK thus entire row*/
	position: relative;
	/*width:max-content to fix too content size*/
	width: max-content;
	/*+ max-width:100% would prevent any overflow with longer text */

	/* outline: 1px solid red; */
}
.card-title::after {
	/* psuedoEl always need content property */
	content: "";
	position: absolute;

	width: calc(100% + var(--padding));
	height: 4px;

	/* we had to use REM for padding, Bcz card-title font is bigger than card-content font, thus too big we need padding size to match card-content (html font) padding (since thats where we offset it) instead of parent's font size*/
	left: calc(var(--padding) * -1);
	bottom: -2px;

	background-color: var(--clr-accent-400);
	transform: scaleX(0);
	transition: transform 500ms ease;
	transform-origin: left;
}

.card:hover .card-title::after,
.card:focus-within .card-title::after {
	/* line animation */
	transform: scaleX(1);
}

.card-body {
	/* one way to lighten text LOL DONT use opacity oops*/
	color: rgb(255 255 255 / 0.85);
}

.button {
	cursor: pointer;
	display: inline-block;
	text-decoration: none;
	color: var(--clr-neutral-900);
	background-color: var(--clr-accent-400);
	padding: 0.5em 1.25em;
	border-radius: 0.25em;

	text-transform: uppercase;
	font-weight: bold;
}

.button:hover,
.button:focus {
	background-color: var(--clr-neutral-100);
}
